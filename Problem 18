class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        map<int, map<int, vector<int>>> nodes;

        queue<pair<TreeNode*, pair<int, int>>> q;
        
        vector<vector<int>> finally;

        if (root == NULL) {
            return finally;
        }
        
        q.push(make_pair(root, make_pair(0, 0)));

        while (!q.empty()) {
            
            pair<TreeNode*, pair<int, int>> temp = q.front();
            q.pop();

           
            TreeNode* frontNode = temp.first;

            
            int hori = temp.second.first;
            
            int lvl = temp.second.second;

            nodes[hori][lvl].push_back(frontNode->val);

            if (frontNode->left) {
                q.push(
                    make_pair(frontNode->left, make_pair(hori - 1, lvl + 1)));
            }
            if (frontNode->right) {
                q.push(
                    make_pair(frontNode->right, make_pair(hori + 1, lvl + 1)));
            }
        }

        for (auto i : nodes) {
            vector<int> ans;
            for (auto j : i.second) {
                vector<int> values = j.second;
                sort(values.begin(), values.end());
                ans.insert(ans.end(), values.begin(), values.end());
            }
            finally.push_back(ans);
        }
        return finally;
    }
};
